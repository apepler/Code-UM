#!/bin/ksh
#----------------------------------------------------------------------
#
#     SCRIPT: run_erai_kk
#
#     LANGUAGE: ksh
#
#     DESCRIPTION:
#
# 
#     A script to find highs or lows in the 6 hourly ERAI mslp 
#     This (new) version calls the UM version of the tracking scheme
#
#     WRITTEN: A Pepler (based on code by K Braganza).
#

#----------------------------------------------------------------------
#     delete function for temporary files

function check_delete {
    if [[ -f $1 ]]; then
	rm -f $1
    fi
}
#----------------------------------------------------------------------
bpath=/short/eg3/asp561/cts.dir/
CYCBIN=$bpath/software.dir/cyc.dir/cycbin
cyclocx=$CYCBIN/cycloc3x.hr
trackx=$CYCBIN/trackx.hr
trackmnx=$CYCBIN/trackmnx.hr
tstatx=$CYCBIN/tstatx.hr
spath=$bpath/Code-UM/code
outdir=$bpath/gcyc_out/
diagnostic=diagnostics.out
stdout=stdout.out
stderr=stderr.out

check_delete $stdout
check_delete $stderr
check_delete $diagnostic

#### Important settings
datapath=/g/data1/ub4/erai/netcdf/6hr/atmos/oper_an_sfc/v01/psl/
firstyear=1990
lastyear=2013

daily=true
level=$1
rad=5
CV=1
proj=240
NN=$((proj*2+1))
if [[ $proj -le 100 ]] ; then
  DFF=2.0
else
  DFF=0.5
fi

if $daily ; then
  echo daily $daily
  gausmake=$spath/gausmake_erai_raijin_gph_daily
  outpath=$outdir/ERAI/${level}hPa_z/daily_proj${proj}_lows_rad${rad%.*}cv${CV}/
else
  echo "not daily, daily = " $daily
  gausmake=$spath/gausmake_erai_raijin_gph
  outpath=$outdir/ERAI/${level}hPa_z/proj${proj}_lows_rad${rad%.*}cv${CV}/
fi

check_delete $diagnostic

#----------------------------------------------------------------------

type=low

print "\nSCRIPT: runplot_mslp_day VERSION: 1.0"
print "\nSCRIPT: runplot_mslp_day VERSION: 1.0" > $diagnostic

#----------------------------------------------------------------------

echo "Beginning MAIN" >> $diagnostic

print "Running for" $firstyear to $lastyear

#----------------------------------------------------------------------
# loop through the years

iyear=$firstyear

while [[ $iyear -le $lastyear ]]; do   


#----------------------------------------------------------------------
# loop through the seasons

dname="ann"

echo $iyear $dname >> $diagnostic

if [[ $iyear -eq 1979 ]] ; then
  date1_loc=$(($iyear))0101
else
  date1_loc=$(($iyear-1))1201
fi
date2_loc=$(($iyear))1231

echo 'date1 loc = ' $date1_loc >> $diagnostic 
echo 'date2 loc = ' $date2_loc >> $diagnostic 

if [[ $iyear -eq 1999 || $iyear -eq 2000 ]] ; then
    date1a=$(($iyear-81))1201
    date2a=$(($iyear-80))1231
    date1_loc2=${date1a:2:6}
    date2_loc2=${date2a:2:6}
else
    date1_loc2=${date1_loc:2:6}
    date2_loc2=${date2_loc:2:6}
fi

print $date1_loc $date1_loc2
print $date2_loc $date2_loc2


#----------------------------------------------------------------------
# loop through the months in the season
# Deleted all the cat part of this file
# as done during gausmake instead

check_delete ingausmake
check_delete incycloc
check_delete intrack
check_delete loc_output
check_delete tape1
check_delete tape11
#----------------------------------------------------------------------
# set up output directories

   if [[ -a $outpath && -d $outpath ]] ; then
    outpath=$outpath
   else
    mkdir -p $outpath  2>> $stderr
    outpath=$outpath
   fi

#----------------------------------------------------------------------
#     Simple processing script

function runjob {
#if [[ -s $infile ]]; then
# print "/PROCESSING FOR $type/s FOR INPUT FILE: $infile"  >> $diagnostic
#else
# print "INPUT FILE DOES NOT EXSIST!: $infile"  >> $diagnostic
# return
#fi

print "AUTOMATICALLY EDITING CONTROL FILES" >> $diagnostic
# Added gausmake which makes the files
sed -e "s/YYYYMMDD1/$date1_loc/" -e "s/YYYYMMDD2/$date2_loc/" -e "s/LLL/$level/" 6hourerai.ingausmake.gph > ingausmake
sed -e "s/YYMMDD1/$date1_loc2/" -e "s/YYMMDD2/$date2_loc2/" -e "s/NN/$NN/g" -e "s/DFF/$DFF/g" -e "s/PROJ/$proj/" -e "s/CVMIN/$CV/g" -e "s/CVRAD/$rad/g" 24houraccess.incycloc > incycloc
sed -e "s/YYMMDD1/$date1_loc2/" -e "s/YYMMDD2/$date2_loc2/" 6hourerai.intrack.kk > intrack

check_delete tape1
check_delete tape11

print 'calling gausmake'
if [[ $iyear -eq 1999 || $iyear -eq 2000 ]] ; then
    $gausmake spec
else
    $gausmake norm
fi
cp tape11 monthfile

print 'calling cycloc'
$CYCBIN/cycloc3x.hr -i incycloc -c loc_output  monthfile >> $stdout
#cp loc_output $outpath/mslpo.$date1_loc$date2_loc.00001800.gcycloc

print 'calling track'
$CYCBIN/trackx.hr  -FO -i intrack -c loc_output >> $stdout
touch trackfile
cat thist?.1 > trackfile
rm -f thist*
#cp trackfile $outpath/mslpo.$date1_loc$date2_loc.00001800.trackfile

ofile=$outpath/tracks_${iyear}.dat
print 'calling awk'
touch $ofile
awk -f $spath/maketracks_UM.awk trackfile > $ofile

check_delete tape11
#check_delete trackfile
check_delete monthfile
check_delete $stdout

}

echo "Run Job" >> $diagnostic
runjob
iyear=$(($iyear+1))
print iyear
#----------------------------------------------------------------------
done  # year loop

#----------------------------------------------------------------------
echo "Finished Main" >> $diagnostic

exit
