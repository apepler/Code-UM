#!/bin/ksh
#----------------------------------------------------------------------
#
#     SCRIPT: run_erai_kk
#
#     LANGUAGE: ksh
#
#     DESCRIPTION:
#
# 
#     A script to find highs or lows in the 6 hourly ERAI mslp 
#     This (new) version calls the UM version of the tracking scheme
#
#     WRITTEN: A Pepler (based on code by K Braganza).
#

#----------------------------------------------------------------------
#     delete function for temporary files

function check_delete {
    if [[ -f $1 ]]; then
	rm -f $1
    fi
}
#----------------------------------------------------------------------
bpath=/home/z3478332/UM/cts.dir

CYCBIN=$bpath/software.dir/cyc.dir/cycbin
cyclocx=$CYCBIN/cycloc3x.hr
trackx=$CYCBIN/trackx.hr
trackmnx=$CYCBIN/trackmnx.hr
tstatx=$CYCBIN/tstatx.hr

spath=$bpath/mine/code
opath=$bpath/mine/cyc_out
diagnostic=$opath/diagnostics.out

#----------------------------------------------------------------------

type=low

print "\nSCRIPT: runplot_mslp_day VERSION: 1.0"
print "\nSCRIPT: runplot_mslp_day VERSION: 1.0" > $diagnostic

#----------------------------------------------------------------------

echo "Beginning MAIN" >> $diagnostic

firstyear=2008
lastyear=2008
res=050
cmip=3
#outpath=$opath/miroc_wrfR2_50_default
#outpath=$opath/echam5_wrfR2_50_default
outpath=$opath/cccma_wrfR2_50_default
#outpath=$opath/csiromk3_wrfR2_50_default

if (($res == 050)); then
  lats=101
  lons=151
  grid='0.5X0.5'
  topo=$spath/WRF_topo_0
fi

print "Running for" $firstyear to $lastyear

#----------------------------------------------------------------------
# loop through the years

#iyear=$firstyear

#while [[ $iyear -le $lastyear ]]; do   

for iyear in 1992 1996 2000 2004 2008
do

#----------------------------------------------------------------------
# loop through the seasons

dname="ann"

echo $iyear $dname >> $diagnostic

date1_loc=$(($iyear))0301
date2_loc=$(($iyear))1231

#if [[ $iyear -eq 1990 ]] ; then
#  date1_loc=$(($iyear))0101
#else
##  date1_loc=$(($iyear))0101
#  date1_loc=$(($iyear-1))1201
#fi


#if [[ $iyear -eq 2009 ]] ; then
#  date2_loc=$(($iyear))1231
#else
##  date2_loc=$(($iyear))1231
#  date2_loc=$(($iyear+1))0131
#fi


echo 'date1 loc = ' $date1_loc >> $diagnostic 
echo 'date2 loc = ' $date2_loc >> $diagnostic 

if [[ $iyear -eq 1999 || $iyear -eq 2000 ]] ; then
    date1a=$(($iyear-80))0301
    date2a=$(($iyear-80))1231
    date1_loc2=${date1a:2:6}
    date2_loc2=${date2a:2:6}
else
    date1_loc2=${date1_loc:2:6}
    date2_loc2=${date2_loc:2:6}
fi

print $date1_loc $date1_loc2
print $date2_loc $date2_loc2

#----------------------------------------------------------------------
# set up output directories

   if [[ -a $outpath && -d $outpath ]] ; then
    outpath=$outpath
   else
    mkdir $outpath  2>> stderr
    outpath=$outpath
   fi

#----------------------------------------------------------------------
# loop through the months in the season
# Deleted all the cat part of this file
# as done during gausmake instead

check_delete ingausmake
check_delete incycloc
check_delete intrack
check_delete loc_output
check_delete tape1
check_delete tape11
check_delete stdout
#----------------------------------------------------------------------
# set up output directories

print 'Output directories setted up.'
print 'Proceeding to running script out.'

#----------------------------------------------------------------------
#     Simple processing script

function runjob {
#if [[ -s $infile ]]; then
# print "/PROCESSING FOR $type/s FOR INPUT FILE: $infile"  >> $diagnostic
#else
# print "INPUT FILE DOES NOT EXSIST!: $infile"  >> $diagnostic
# return
#fi

print "AUTOMATICALLY EDITING CONTROL FILES" >> $diagnostic
# Added gausmake which makes the files
sed -e "s/YYYYMMDD1/$date1_loc/" -e "s/YYYYMMDD2/$date2_loc/" -e "s/XLON/$lons/" -e "s/YLAT/$lats/" -e "s/RRRR/$res/" -e "s/GGGG/$grid/" -e "s/VVVV/$cmip/" 6hourwrf2.ingausmake.kk > ingausmake
sed -e "s/YYMMDD1/$date1_loc2/" -e "s/YYMMDD2/$date2_loc2/" 6hourmerra.incycloc.kk > incycloc
sed -e "s/YYMMDD1/$date1_loc2/" -e "s/YYMMDD2/$date2_loc2/" 6hourerai.intrack.kk > intrack

check_delete tape1
check_delete tape11

print 'calling gausmake'

if [[ $iyear -eq 1999 || $iyear -eq 2000 ]] ; then
    $spath/gausmake_cmipwrf_v2a spec
else
    $spath/gausmake_cmipwrf_v2a norm
fi
cp tape11 monthfile

print 'calling cycloc'
$CYCBIN/cycloc3x.hr -i incycloc -d 1 -c loc_output -z $topo monthfile >> stdout
#$CYCBIN/cycloc3x.hr -i incycloc -d 1 -c loc_output monthfile >> stdout
#cp loc_output $outpath/mslpo.$date1_loc$date2_loc.00001800.gcycloc

print 'calling track'
$CYCBIN/trackx.hr  -FO -i intrack -d 1 -c loc_output >> stdout
touch trackfile
cat thist?.1 > trackfile
rm -f thist*
#cp trackfile $outpath/mslpo.$date1_loc$date2_loc.00001800.trackfile

ofile=$outpath/tracks_${iyear}b.dat
print 'calling awk'
touch $ofile
awk -f $spath/maketracks_UM.awk trackfile > $ofile

check_delete tape11
check_delete trackfile
check_delete monthfile

}

echo "Run Job" >> $diagnostic
runjob
iyear=$(($iyear+1))
print iyear
#rm stdout
#----------------------------------------------------------------------
done  # year loop

#----------------------------------------------------------------------
echo "Finished Main" >> $diagnostic

exit
