#!/bin/ksh
#----------------------------------------------------------------------
#
#     SCRIPT: run_erai_kk
#
#     LANGUAGE: ksh
#
#     DESCRIPTION:
#
# 
#     A script to find highs or lows in the 6 hourly ERAI mslp 
#     This (new) version calls the UM version of the tracking scheme
#
#     WRITTEN: A Pepler (based on code by K Braganza).
#

#----------------------------------------------------------------------
#     delete function for temporary files

function check_delete {
    if [[ -f $1 ]]; then
	rm -f $1
    fi
}
#----------------------------------------------------------------------
bpath=/home/z3478332/UM/cts.dir

CYCBIN=$bpath/software.dir/cyc.dir/cycbin
cyclocx=$CYCBIN/cycloc3x.hr
trackx=$CYCBIN/trackx.hr
trackmnx=$CYCBIN/trackmnx.hr
tstatx=$CYCBIN/tstatx.hr

spath=$bpath/mine/code
opath=/srv/ccrc/data34/z3478332/20CR/ECLs/output/ensemble_56mem/tracks/
diagnostic=$opath/diagnostics.out

#----------------------------------------------------------------------

type=low

print "\nSCRIPT: runplot_mslp_day VERSION: 1.0"
print "\nSCRIPT: runplot_mslp_day VERSION: 1.0" > $diagnostic

#----------------------------------------------------------------------

echo "Beginning MAIN" >> $diagnostic

### Select years to run for

firstyear=2009
lastyear=2012

##Select ensemble members to run - default is just 1
firstmem=1
lastmem=56

##Select projection information & smoothing
## Grid resolution at a given latitude is ~ 114.6/proj * cos**2 ( 90. - phi)/2 )
## So I tend to use proj ~ 100 for 1.5 degrees, or proj ~60 for 2.5. 100 should do for now. 
## DFF is smoothing - 2.0 is good for ~ 1.5-2.5 degrees, but i go to 0.5 for high-res data
proj=100
DFF=2.0
NN=$((proj*2+1))

##Select path to store data
## Alternately, this can be inbuilt in the code as a function of e.g. projection
outpath=cyc_out/outputUM_20CR
## You may want to change the naming structure of output files too.

print "Running for" $firstyear to $lastyear

#----------------------------------------------------------------------
# loop through the years

#imem=$firstmem
#while [[ $imem -le $lastmem ]]; do  
#iyear=$firstyear
#while [[ $iyear -le $lastyear ]]; do   
for iyear in 2010 ; do
for imem in 5 43 41 36 29 24  ; do

## Generally, run from december to december to catch cross-year events
if [[ $iyear -eq 1871 ]] ; then
  date1_loc=$(($iyear))0101
else
#  date1_loc=$(($iyear))0101
  date1_loc=$(($iyear-1))1201
fi

date2_loc=$(($iyear))1231

echo 'date1 loc = ' $date1_loc >> $diagnostic 
echo 'date2 loc = ' $date2_loc >> $diagnostic 

## The algorithm uses 3-digit dates, so have a correction when cross-millenial
if [[ $iyear -eq 1999 || $iyear -eq 2000 ]] ; then
    date1a=$(($iyear-81))1201
    date2a=$(($iyear-79))1201
    date1_loc2=${date1a:2:6}
    date2_loc2=${date2a:2:6}
else
    date1_loc2=${date1_loc:2:6}
    date2_loc2=${date2_loc:2:6}
fi

print $date1_loc $date1_loc2
print $date2_loc $date2_loc2

#----------------------------------------------------------------------
# set up output directories

   if [[ -a $outpath && -d $outpath ]] ; then
    outpath=$outpath
   else
    mkdir $outpath  2>> stderr
    outpath=$outpath
   fi

#----------------------------------------------------------------------
# Clean up any preexisting files

check_delete ingausmake
check_delete incycloc
check_delete intrack
check_delete loc_output
check_delete tape1
check_delete tape11
check_delete stdout
#----------------------------------------------------------------------
# set up output directories

print 'Output directories setted up.'
print 'Proceeding to running script out.'

#----------------------------------------------------------------------
#     Simple processing script

function runjob {

print 'member' $imem

print "AUTOMATICALLY EDITING CONTROL FILES" >> $diagnostic
# Added gausmake which makes the files - choosing dates & member
sed -e "s/YYYYMMDD1/$date1_loc/" -e "s/YYYYMMDD2/$date2_loc/" -e "s/ENS/$imem/" 6hour20cr.ingausmake.kk > ingausmake
sed -e "s/YYMMDD1/$date1_loc2/" -e "s/YYMMDD2/$date2_loc2/" -e "s/NN/$NN/g" -e "s/DFF/$DFF/g" -e "s/PROJ/$proj/" 6hour20cr.incycloc.kk > incycloc
sed -e "s/YYMMDD1/$date1_loc2/g" -e "s/YYMMDD2/$date2_loc2/" 6hour20cr.intrack.kk > intrack

check_delete tape1
check_delete tape11

print 'calling gausmake'

if [[ $iyear -eq 1999 || $iyear -eq 2000 ]] ; then
    $spath/gausmake_20cr_ensemble spec
else
    $spath/gausmake_20cr_ensemble norm
fi
cp tape11 monthfile

print 'calling cycloc'
#$CYCBIN/cycloc3x.hr -i incycloc -c loc_output monthfile >> stdout
$CYCBIN/cycloc3x.hr -i incycloc -c loc_output -z $spath/20cr_topo monthfile >> stdout

print 'calling track'
$CYCBIN/trackx.hr  -FO -i intrack -d 1 -c loc_output #>> stdout
touch trackfile
cat thist?.1 > trackfile
rm -f thist*

ofile=$opath/tracks_${iyear}_${imem}.dat
print 'calling awk'
touch $ofile
awk -f $spath/maketracks_UM.awk trackfile > $ofile

#check_delete tape11
#check_delete trackfile
#check_delete monthfile

}

echo "Run Job" >> $diagnostic
runjob
#iyear=$(($iyear+1))
rm stdout
#----------------------------------------------------------------------
done  # year loop

#imem=$(($imem+1))
print $imem
done  # ensemble loop

#----------------------------------------------------------------------
echo "Finished Main" >> $diagnostic

exit
